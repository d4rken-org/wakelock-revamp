apply plugin: 'com.android.application'
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.bugsnag.android.gradle'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("GMT+1"))

bugsnag {
    overwrite true
}

android {
    def packageName = "eu.thedarken.wldonate"

    def signingPropFile = new File(System.properties['user.home'], ".appconfig/${packageName}/signing.properties")
    if (signingPropFile.canRead()) {
        Properties signingProps = new Properties()
        signingProps.load(new FileInputStream(signingPropFile))
        signingConfigs {
            release {
                storeFile new File(signingProps['release.storePath'])
                keyAlias signingProps['release.keyAlias']
                storePassword signingProps['release.storePassword']
                keyPassword signingProps['release.keyPassword']
            }
        }
    }

    compileSdkVersion buildConfig.compileSdk

    Properties bugsnagProps = new Properties()
    def bugsnagPropsFile = new File(System.properties['user.home'], ".appconfig/${packageName}/bugsnag.properties")
    if (bugsnagPropsFile.canRead()) bugsnagProps.load(new FileInputStream(bugsnagPropsFile))

    defaultConfig {
        applicationId "${packageName}"

        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk

        versionCode buildConfig.version.code
        versionName buildConfig.version.name

        buildConfigField "String", "GITSHA", "\"${gitSha}\""
        buildConfigField "String", "BUILDTIME", "\"${buildTime}\""

        testInstrumentationRunner "${packageName}.ExampleTestRunner"

        manifestPlaceholders = [apikey_bugsnag: ""]

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        debug {

        }
        release {
            if (signingConfigs.hasProperty('release')) signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [apikey_bugsnag: bugsnagProps.getProperty("bugsnag.apikey", "")]
        }
        applicationVariants.all { variant ->
            if (variant.buildType.name == "debug") {
                variant.mergedFlavor.resourceConfigurations.clear()
                variant.mergedFlavor.resourceConfigurations.add("en")
            } else if (variant.buildType.name != "debug") {
                variant.outputs.each { output ->
                    output.outputFileName = "${packageName}-v" + defaultConfig.versionName + "(" + defaultConfig.versionCode + ")-" + variant.buildType.name.toUpperCase() + "-" + gitSha + ".apk"
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

android {
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:animated-vector-drawable:${versions.supportLibrary}"
        resolutionStrategy.force "com.android.support:preference-v7:${versions.supportLibrary}"
    }
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"

    // Support libs
    implementation "com.android.support:support-annotations:${versions.supportLibrary}"
    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support:design:${versions.supportLibrary}"
    implementation "com.android.support:customtabs:${versions.supportLibrary}"
    implementation "com.android.support.constraint:constraint-layout:1.1.2"

    // Crashtracking
    implementation 'com.bugsnag:bugsnag-android:4.3.1'

    // IAPs
    implementation 'com.android.billingclient:billing:1.0'

    // MVP lib
    implementation 'eu.darken.mvpbakery:library:0.4.1'

    // RX
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    //Dagger
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"

    //Butterknife
    implementation "com.jakewharton:butterknife:${versions.butterknife}"
    kapt "com.jakewharton:butterknife-compiler:${versions.butterknife}"

    //Timber
    implementation "com.jakewharton.timber:timber:4.7.0"

    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    // Testing
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.20.0"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1'
    testImplementation 'com.github.tmurakami:dexopener:1.0.2'

    androidTestImplementation "org.mockito:mockito-core:2.20.0"
    androidTestImplementation 'org.mockito:mockito-android:2.19.1'
    androidTestImplementation 'com.github.tmurakami:dexopener:1.0.2'

    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso.idling:idling-concurrent:3.0.2'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}